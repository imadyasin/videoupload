package com.example.videoupload.service;

import java.io.FileNotFoundException;
import org.springframework.core.io.UrlResource;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.example.videoupload.entity.Video;
import com.example.videoupload.repository.VideoRepository;
import org.springframework.core.io.FileSystemResource;
import jakarta.annotation.Resource;

import org.springframework.core.io.ByteArrayResource;


@Service
public class VideoService {
	
	@Autowired
	private VideoRepository videoRepository;
	
	 @Value("${spring.servlet.multipart.location}")
	    private String uploadPath;

	    public Video saveVideo(Video video, MultipartFile file) throws IOException {
	        String fileName = System.currentTimeMillis() + "-" + file.getOriginalFilename();
	        Path filePath = Path.of(uploadPath + fileName);
	        Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

	        video.setVideoPath(fileName);
	        return videoRepository.save(video);
	    }
	    
	    public List<Video> getAllVideos(String videoPath) {
	        List<Video> allVideos = videoRepository.findAll();

	        if (videoPath != null && !videoPath.isEmpty()) {
	            // If videoPath is provided, filter the videos based on paths
	            return allVideos.stream()
	                    .filter(video -> videoPath.equals(video.getVideoPath()))
	                    .collect(Collectors.toList());
	        } else {
	            // If videoPath is not provided, return all videos
	            return allVideos;
	        }
	    }
	    
	    public Resource getVideoResource(String path) throws IOException {
	        Path filePath = Path.of(uploadPath + path);
	        byte[] videoBytes = Files.readAllBytes(filePath);
	        return new ByteArrayResource(videoBytes);
	    }
}
