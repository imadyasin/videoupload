package com.example.videoupload.controller;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.videoupload.entity.Video;
import com.example.videoupload.service.VideoService;
import com.fasterxml.jackson.databind.ObjectMapper;

@RestController
@RequestMapping("/api/videos")
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class VideoController {

    @Autowired
    private VideoService videoService;

    @PostMapping(value = "/save", consumes = "multipart/form-data")
    public ResponseEntity<Video> uploadVideo(
            @RequestParam("file") MultipartFile file,
            @RequestParam("video") String videoJson) {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            Video video = objectMapper.readValue(videoJson, Video.class);

            Video savedVideo = videoService.saveVideo(video, file);
            return new ResponseEntity<>(savedVideo, HttpStatus.CREATED);
        } catch (IOException e) {
            e.printStackTrace();
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/getAll")
    public ResponseEntity<List<Video>> getAllVideos() {
        List<Video> videos = videoService.getAllVideos(null); // Pass null or an empty string to get all videos
        return new ResponseEntity<>(videos, HttpStatus.OK);
    }

    @GetMapping("/stream")
    @GetMapping("/stream")
    public ResponseEntity<Resource> streamVideo(@RequestParam("filePath") String filePath) {
        try {
            Video video = videoService.getByFilePath(filePath);
            if (video != null) {
                String videoPath = video.getFilePath();
                byte[] videoBytes = Files.readAllBytes(Paths.get(videoPath));

                ByteArrayResource videoResource = new ByteArrayResource(videoBytes);

                return ResponseEntity.ok()
                        .contentType(org.springframework.http.MediaType.APPLICATION_OCTET_STREAM)
                        .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + video.getTitle() + "\"")
                        .body(videoResource);
            }

            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

}
